// Code generated by protoc-gen-go.
// source: microRpc.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegisterReq struct {
	PhoneNumber uint64 `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto1.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RegisterRes struct {
	ErrCode uint32 `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
}

func (m *RegisterRes) Reset()                    { *m = RegisterRes{} }
func (m *RegisterRes) String() string            { return proto1.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()               {}
func (*RegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto1.RegisterType((*RegisterReq)(nil), "proto.RegisterReq")
	proto1.RegisterType((*RegisterRes)(nil), "proto.RegisterRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Register service

type RegisterClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
}

type registerClient struct {
	cc *grpc.ClientConn
}

func NewRegisterClient(cc *grpc.ClientConn) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := grpc.Invoke(ctx, "/proto.Register/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Register service

type RegisterServer interface {
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
}

func RegisterRegisterServer(s *grpc.Server, srv RegisterServer) {
	s.RegisterService(&_Register_serviceDesc, srv)
}

func _Register_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Register/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Register_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Register_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto1.RegisterFile("microRpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcd, 0x4c, 0x2e,
	0xca, 0x0f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x3e,
	0x5c, 0xdc, 0x41, 0xa9, 0xe9, 0x99, 0xc5, 0x25, 0xa9, 0x45, 0x41, 0xa9, 0x85, 0x42, 0x8a, 0x5c,
	0x3c, 0x05, 0x19, 0xf9, 0x79, 0xa9, 0xf1, 0x79, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x2c, 0x41, 0xdc, 0x60, 0x31, 0x3f, 0xb0, 0x90, 0x90, 0x14, 0x17, 0x47, 0x41, 0x62,
	0x71, 0x71, 0x79, 0x7e, 0x51, 0x8a, 0x04, 0x13, 0x50, 0x9a, 0x33, 0x08, 0xce, 0x57, 0xd2, 0x40,
	0x36, 0xad, 0x58, 0x48, 0x92, 0x8b, 0x23, 0xb5, 0xa8, 0x28, 0x3e, 0x39, 0x3f, 0x25, 0x15, 0x6c,
	0x12, 0x6f, 0x10, 0x3b, 0x90, 0xef, 0x0c, 0xe4, 0x1a, 0x39, 0x70, 0x71, 0xc0, 0x54, 0x0a, 0x99,
	0x20, 0xb1, 0x85, 0x20, 0xce, 0xd3, 0x43, 0x72, 0x94, 0x14, 0xa6, 0x58, 0xb1, 0x12, 0x43, 0x12,
	0x1b, 0x58, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x84, 0xad, 0x2e, 0x29, 0xd9, 0x00, 0x00,
	0x00,
}
